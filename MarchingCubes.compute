// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MarchTables.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

// Inputs
StructuredBuffer<float> Data;
bool smoothTerrain;
float Size;

// Outputs
AppendStructuredBuffer<float3> vertices;



float SampleTerrain(int3 dot) {
    return Data[dot.x + dot.y * Size + dot.z * Size * Size];
}

int GetCubeConfiguration (float _cube[8]) {

   int configurationIndex = 0;
   for (int i = 0; i < 8; i++) {
       if (_cube[i] > 0.5)
       {
           configurationIndex |= 1 << i;
       }

    }

    return configurationIndex;
}

[numthreads(8, 8, 8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float cube[8];
    for (int i = 0; i < 8; i++) {

           cube[i] = SampleTerrain(id + CornerTable[i]);

    }

    int configIndex = GetCubeConfiguration(cube);

    // If the configuration of this cube is 0 or 255 (completely inside the terrain or completely outside of it) we don't need to do anything.
    if (configIndex == 0 || configIndex == 255)
    {
       return;
    }
     
    // Loop through the triangles. There are never more than 5 triangles to a cube and only three vertices to a triangle.
    int edgeIndex = 0;
    for(int a = 0; a < 5; a++) 
    {
       for(int p = 0; p < 3; p++) 
       {
          // Get the current indice. We increment triangleIndex through each loop.
          int indice = TriangleTable[configIndex][edgeIndex];
          
          if (indice == -1)
          {
             return;
          }

          // Get the vertices for the start and end of this edge. 
          float3 vert1 = id + CornerTable[EdgeIndexes[indice][0]];
          float3 vert2 = id + CornerTable[EdgeIndexes[indice][1]];
          
          float3 vertPosition;

          if (smoothTerrain) 
          {
              // Get the terrain values at either end of our current edge from the cube array created above.
              float vert1Sample = cube[EdgeIndexes[indice][0]];
              float vert2Sample = cube[EdgeIndexes[indice][1]];

              // Calculate the difference between the terrain values.
              float difference = vert2Sample - vert1Sample;
              
              if (difference == 0)
              {
                 difference = 0.5;
              }
              else
              {
                 difference = (0.5 - vert1Sample) / difference;
              }

              // Calculate the point along the edge that passes through.
              vertPosition = vert1 + ((vert2 - vert1) * difference);
          }
          else
          {
             // Get the midpoint of this edge.
             vertPosition = (vert1 + vert2) / 2;
          }
          vertices.Append(vertPosition);

          edgeIndex++;
       }
    } 

}
